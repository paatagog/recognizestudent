# საერთო ფუნქციები ყველა მოდულისთვის


def get_face_rect(x_face, y_face, w_face, h_face, w_encoding, h_encoding):
    """
      სურათზე გამოსახული სახე მოქცეულია გარკვეული პარამეტრების მქონე მართკუთხედში
      სახის ამომცნობი მოდულისთვის აუცილებლია, რომ სახე იყოს მოქცეული ფიქსირებული სიგანისა და სიმაღლის მართკუთხედში
      ეს ფუნქცია აბრუნებს სურათიდან ამოსაჭრელი მართკუთხედის ზედა მარცხენა წვეროს კოორდინატებს, სიგანესა და სიგრძეს
      ისე, რომ სახე მთლიანად ექცეოდეს შიგნით და ფიქსირებულ ზომებზე სკალირებისას არ დამახინჯდეს სახის პროპორციები,
      ასევე აბრუნებს ჭეშმარიტ მნიშვნელობას, თუ სახის ამოჭრისთვის საჭიროა სურათის არის გაფართოება
        x_face, y_face - სახის მართკუთხედის მარცხენა ზედა წვეროს კოორდინატები
        w_face, h_face - სახის მართკუთხედის სიგანე და სიმაღლე
        w_encoding, h_encoding - საბოლოო შედეგისთვის საჭირო სიგანე და სიმაღლე
    """
    k1 = w_face / h_face
    k2 = w_encoding / h_encoding

    if k1 < k2:  # უნდა გავზარდოთ w
        w_new = h_face * k2
        d = w_new - w_face
        x_face -= d / 2
        w_face = w_new
    else:
        h_new = w_face / k2  # უნდა გავზარდოთ h
        d = h_new - h_face
        y_face -= d / 2
        h_face = h_new
    return x_face, y_face, w_face, h_face


# ტესტები
# print(get_face_rect(17, 26, 15, 17, 150, 170))
# (17, 26.0, 15, 17.0)
# print(get_face_rect(17, 26, 15, 17, 170, 170))
# (16.0, 26, 17.0, 17)
# print(get_face_rect(17, 26, 15, 17, 150, 190))
# (17, 25.0, 15, 19.0)
# print(get_face_rect(17, 26, 15, 17, 150, 150))
# (16.0, 26, 17.0, 17)
# print(get_face_rect(17, 26, 150, 170, 15, 15))
# (7.0, 26, 170.0, 170)


def face_area_fill_needed(x_face, y_face, w_face, h_face, w_image, h_image):
    """
      აბრუნებს ჭეშმარიტ მნიშვნელობას, თუ სახის ამოჭრისთვის საჭიროა სურათის არის გაფართოება
        x_face, y_face - სახის მართკუთხედის მარცხენა ზედა წვეროს კოორდინატები
        w_face, h_face - სახის მართკუთხედის სიგანე და სიმაღლე
        w_image, h_image - სახის მართკუთხედის სიგანე და სიმაღლე
    """
    return x_face < 0 or y_face < 0 or x_face + w_face > w_image or y_face + h_face > h_image